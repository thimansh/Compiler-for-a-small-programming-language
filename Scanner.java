/* *
 * Scanner for the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Fall 2017.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Fall 2017 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2017
 */

package cop5556fa17;

import java.util.*;

public class Scanner {

	@SuppressWarnings("serial")
	public static class LexicalException extends Exception {

		int pos;

		public LexicalException(String message, int pos) {
			super(message);
			this.pos = pos;
		}

		public int getPos() {
			return pos;
		}

	}

	public static enum Kind {
		IDENTIFIER, INTEGER_LITERAL, BOOLEAN_LITERAL, STRING_LITERAL, KW_x/* x */, KW_X/* X */, KW_y/* y */, KW_Y/* Y */, KW_r/* r */, KW_R/* R */, KW_a/* a */, KW_A/* A */, KW_Z/* Z */, KW_DEF_X/* DEF_X */, KW_DEF_Y/* DEF_Y */, KW_SCREEN/* SCREEN */, KW_cart_x/* cart_x */, KW_cart_y/* cart_y */, KW_polar_a/* polar_a */, KW_polar_r/* polar_r */, KW_abs/* abs */, KW_sin/* sin */, KW_cos/* cos */, KW_atan/* atan */, KW_log/* log */, KW_image/* image */, KW_int/* int */, KW_boolean/* boolean */, KW_url/* url */, KW_file/* file */, OP_ASSIGN/* = */, OP_GT/* > */, OP_LT/* < */, OP_EXCL/* ! */, OP_Q/* ? */, OP_COLON/* : */, OP_EQ/* == */, OP_NEQ/* != */, OP_GE/* >= */, OP_LE/* <= */, OP_AND/* & */, OP_OR/* | */, OP_PLUS/* + */, OP_MINUS/* - */, OP_TIMES/* * */, OP_DIV/* / */, OP_MOD/* % */, OP_POWER/* ** */, OP_AT/* @ */, OP_RARROW/* -> */, OP_LARROW/* <- */, LPAREN/* ( */, RPAREN/* ) */, LSQUARE/* [ */, RSQUARE/* ] */, SEMI/* ; */, COMMA/* , */, EOF;
	}

	public static enum State {
		START, END, IN_IDENT, IN_DIGIT, IN_COMMENT, IN_STRING;
	}

	/**
	 * Class to represent Tokens.
	 * 
	 * This is defined as a (non-static) inner class which means that each Token
	 * instance is associated with a specific Scanner instance. We use this when
	 * some token methods access the chars array in the associated Scanner.
	 * 
	 * 
	 * @author Beverly Sanders
	 *
	 */
	public class Token {
		public final Kind kind;
		public final int pos;
		public final int length;
		public final int line;
		public final int pos_in_line;

		public Token(Kind kind, int pos, int length, int line, int pos_in_line) {
			super();
			this.kind = kind;
			this.pos = pos;
			this.length = length;
			this.line = line;
			this.pos_in_line = pos_in_line;
		}

		public String getText() {
			if (kind == Kind.STRING_LITERAL) {
				return chars2String(chars, pos, length);
			} else
				return String.copyValueOf(chars, pos, length);
		}

		/**
		 * To get the text of a StringLiteral, we need to remove the enclosing "
		 * characters and convert escaped characters to the represented
		 * character. For example the two characters \ t in the char array
		 * should be converted to a single tab character in the returned String
		 * 
		 * @param chars
		 * @param pos
		 * @param length
		 * @return
		 */
		private String chars2String(char[] chars, int pos, int length) {
			StringBuilder sb = new StringBuilder();
			for (int i = pos + 1; i < pos + length - 1; ++i) {// omit initial
																// and final "
				char ch = chars[i];
				if (ch == '\\') { // handle escape
					i++;
					ch = chars[i];
					switch (ch) {
					case 'b':
						sb.append('\b');
						break;
					case 't':
						sb.append('\t');
						break;
					case 'f':
						sb.append('\f');
						break;
					case 'r':
						sb.append('\r'); // for completeness, line termination
											// chars not allowed in String
											// literals
						break;
					case 'n':
						sb.append('\n'); // for completeness, line termination
											// chars not allowed in String
											// literals
						break;
					case '\"':
						sb.append('\"');
						break;
					case '\'':
						sb.append('\'');
						break;
					case '\\':
						sb.append('\\');
						break;
					default:
						assert false;
						break;
					}
				} else {
					sb.append(ch);
				}
			}
			return sb.toString();
		}

		/**
		 * precondition: This Token is an INTEGER_LITERAL
		 * 
		 * @returns the integer value represented by the token
		 */
		public int intVal() {
			assert kind == Kind.INTEGER_LITERAL;
			return Integer.valueOf(String.copyValueOf(chars, pos, length));
		}

		public String toString() {
			return "[" + kind + "," + String.copyValueOf(chars, pos, length) + "," + pos + "," + length + "," + line
					+ "," + pos_in_line + "]";
		}

		/**
		 * Since we overrode equals, we need to override hashCode.
		 * https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-
		 * 
		 * Both the equals and hashCode method were generated by eclipse
		 * 
		 */
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + ((kind == null) ? 0 : kind.hashCode());
			result = prime * result + length;
			result = prime * result + line;
			result = prime * result + pos;
			result = prime * result + pos_in_line;
			return result;
		}

		/**
		 * Override equals method to return true if other object is the same
		 * class and all fields are equal.
		 * 
		 * Overriding this creates an obligation to override hashCode.
		 * 
		 * Both hashCode and equals were generated by eclipse.
		 * 
		 */
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Token other = (Token) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (kind != other.kind)
				return false;
			if (length != other.length)
				return false;
			if (line != other.line)
				return false;
			if (pos != other.pos)
				return false;
			if (pos_in_line != other.pos_in_line)
				return false;
			return true;
		}

		/**
		 * used in equals to get the Scanner object this Token is associated
		 * with.
		 * 
		 * @return
		 */
		private Scanner getOuterType() {
			return Scanner.this;
		}

	}

	/**
	 * Extra character added to the end of the input characters to simplify the
	 * Scanner.
	 */
	static final char EOFchar = 0;

	/**
	 * The list of tokens created by the scan method.
	 */
	final ArrayList<Token> tokens;

	/**
	 * An array of characters representing the input. These are the characters
	 * from the input string plus and additional EOFchar at the end.
	 */
	final char[] chars;

	/**
	 * position of the next token to be returned by a call to nextToken
	 */
	private int nextTokenPos = 0;

	Scanner(String inputString) {
		int numChars = inputString.length();
		this.chars = Arrays.copyOf(inputString.toCharArray(), numChars + 1); // input
																				// string
																				// terminated
																				// with
																				// null
																				// char
		chars[numChars] = EOFchar;
		tokens = new ArrayList<Token>();
	}

	/**
	 * Method to scan the input and create a list of Tokens.
	 * 
	 * If an error is encountered during scanning, throw a LexicalException.
	 * 
	 * @return
	 * @throws LexicalException
	 * 
	 */

	public int pos = 0;
	public State state = State.START;
	public int line = 1;
	public int startPos = 0;
	public int posInLine = 1;

	public static boolean isAscii(char ch) {
		return ch >= 0 && ch < 127;
	}

	public void pos_of_token(int pos, int startPos, int posInLine) {
		// System.out.println("this tokenlength is working" + " " + pos + " "
		// +posInLine + " ");
		int leng = pos - startPos;
		this.startPos = startPos + leng;
		this.posInLine = posInLine + leng;
		// System.out.println("this tokenlength is working" + leng + " " + pos +
		// " " +posInLine + " ");
	}

	public Scanner scan() throws LexicalException {
		int len = chars.length;
		String keycheck;
		Map<String, Kind> keywordmap = new HashMap<>();
		keywordmap.put("x", Kind.KW_x);
		keywordmap.put("X", Kind.KW_X);
		keywordmap.put("y", Kind.KW_y);
		keywordmap.put("Y", Kind.KW_Y);
		keywordmap.put("r", Kind.KW_r);
		keywordmap.put("R", Kind.KW_R);
		keywordmap.put("a", Kind.KW_a);
		keywordmap.put("A", Kind.KW_A);
		keywordmap.put("Z", Kind.KW_Z);
		keywordmap.put("DEF_X", Kind.KW_DEF_X);
		keywordmap.put("DEF_Y", Kind.KW_DEF_Y);
		keywordmap.put("SCREEN", Kind.KW_SCREEN);
		keywordmap.put("cart_x", Kind.KW_cart_x);
		keywordmap.put("cart_y", Kind.KW_cart_y);
		keywordmap.put("polar_a", Kind.KW_polar_a);
		keywordmap.put("polar_r", Kind.KW_polar_r);
		keywordmap.put("abs", Kind.KW_abs);
		keywordmap.put("sin", Kind.KW_sin);
		keywordmap.put("cos", Kind.KW_cos);
		keywordmap.put("atan", Kind.KW_atan);
		keywordmap.put("log", Kind.KW_log);
		keywordmap.put("image", Kind.KW_image);
		keywordmap.put("int", Kind.KW_int);
		keywordmap.put("boolean", Kind.KW_boolean);
		keywordmap.put("url", Kind.KW_url);
		keywordmap.put("file", Kind.KW_file);
		keywordmap.put("true", Kind.BOOLEAN_LITERAL);
		keywordmap.put("false", Kind.BOOLEAN_LITERAL);
		while (pos < len - 1) {
			switch (state) {
			case START: {
				startPos = pos;
				switch (chars[pos]) {
				// OPERATORS
				case '+': {
					pos++;
					tokens.add(new Token(Kind.OP_PLUS, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case '%': {
					pos++;
					tokens.add(new Token(Kind.OP_MOD, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case '@': {
					pos++;
					tokens.add(new Token(Kind.OP_AT, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case '0': {
					pos++;
					tokens.add(new Token(Kind.INTEGER_LITERAL, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case '?': {
					pos++;
					tokens.add(new Token(Kind.OP_Q, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case ':': {
					pos++;
					tokens.add(new Token(Kind.OP_COLON, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case '&': {
					pos++;
					tokens.add(new Token(Kind.OP_AND, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case '|': {
					pos++;
					tokens.add(new Token(Kind.OP_OR, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case '-': {
					if ((pos + 1) == len || chars[pos + 1] != '>') {
						pos++;
						tokens.add(new Token(Kind.OP_MINUS, startPos, pos - startPos, line, posInLine));
						posInLine++;
					} else if ((pos + 1) < len && chars[pos + 1] == '>') {
						pos += 2;
						tokens.add(new Token(Kind.OP_RARROW, startPos, pos - startPos, line, posInLine));
						posInLine += 2;
					}
				}
					break;

				case '*': {
					if ((pos + 1) == len || chars[pos + 1] != '*') {
						pos++;
						tokens.add(new Token(Kind.OP_TIMES, startPos, pos - startPos, line, posInLine));
						posInLine++;
					} else if ((pos + 1) < len && chars[pos + 1] == '*') {
						pos += 2;
						tokens.add(new Token(Kind.OP_POWER, startPos, pos - startPos, line, posInLine));
						posInLine += 2;
					}
				}
					break;

				case '=': {
					if ((pos + 1) == len || chars[pos + 1] != '=') {
						pos++;
						tokens.add(new Token(Kind.OP_ASSIGN, startPos, 1, line, posInLine));
						posInLine++;
						//System.out.println(posInLine + " ++ ");
					} else if ((pos + 1) < len && chars[pos + 1] == '=') {
						pos += 2;
						tokens.add(new Token(Kind.OP_EQ, startPos, 2, line, posInLine));
						posInLine += 2;
					}
				}
					break;

				case '!': {
					if ((pos + 1) == len || chars[pos + 1] != '=') {
						pos++;
						tokens.add(new Token(Kind.OP_EXCL, startPos, pos - startPos, line, posInLine));
						posInLine++;
					} else if ((pos + 1) < len && chars[pos + 1] == '=') {
						pos += 2;
						tokens.add(new Token(Kind.OP_NEQ, startPos, pos - startPos, line, posInLine));
						posInLine += 2;
					} // startPos+=2;}
				}
					break;

				case '/': {
					if ((pos + 1) == len || chars[pos + 1] != '/') {
						pos++;
						tokens.add(new Token(Kind.OP_DIV, startPos, pos - startPos, line, posInLine));
						posInLine++;
					} else if ((pos + 1) < len && chars[pos + 1] == '/') {
						state = State.IN_COMMENT;
						pos += 2;
						posInLine += 2;
					} // startPos+=2;}
				}
					break;

				case '>': {
					if ((pos + 1) == len || chars[pos + 1] != '=') {
						pos++;
						tokens.add(new Token(Kind.OP_GT, startPos, pos - startPos, line, posInLine));
						posInLine++;
					} else if ((pos + 1) < len && chars[pos + 1] == '=') {
						pos += 2;
						tokens.add(new Token(Kind.OP_GE, startPos, pos - startPos, line, posInLine));
						posInLine += 2;
					} // startPos+=2;}
				}
					break;
				case '<': {
					if ((pos + 1) == len || (chars[pos + 1] != '=' && chars[pos + 1] != '-')) {
						pos++;
						tokens.add(new Token(Kind.OP_LT, startPos, pos - startPos, line, posInLine));
						posInLine++;
					} else if ((pos + 1) < len && chars[pos + 1] == '=') {
						pos += 2;
						tokens.add(new Token(Kind.OP_LE, startPos, pos - startPos, line, posInLine));
						posInLine += 2;
					} else if ((pos + 1) < len && chars[pos + 1] == '-') {
						pos += 2;
						tokens.add(new Token(Kind.OP_LARROW, startPos, pos - startPos, line, posInLine));
						posInLine += 2;
					}
				}
					break;
				// SEPARATORS
				case '(': {
					pos++;
					tokens.add(new Token(Kind.LPAREN, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case ')': {
					pos++;
					tokens.add(new Token(Kind.RPAREN, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case '[': {
					pos++;
					tokens.add(new Token(Kind.LSQUARE, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case ']': {
					pos++;
					tokens.add(new Token(Kind.RSQUARE, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case ';': {
					pos++;
					tokens.add(new Token(Kind.SEMI, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				case ',': {
					pos++;
					tokens.add(new Token(Kind.COMMA, startPos, pos - startPos, line, posInLine));
					posInLine++;
				}
					break;
				/// n/r
				case '\n': {
					posInLine = 1;
					pos++;
					line++;
				}
					break;
				case '\r': {
					posInLine = 1;
					pos++;
					line++;
					if ((pos) < len && chars[pos] == '\n')
						pos++;
				}
					break;

				// STRING LITERAL
				case '\"': {
					state = State.IN_STRING;
					pos++;
				}
					break;
				default: {
					if (Character.isDigit(chars[pos])) {
						state = State.IN_DIGIT;
					} else if (Character.isLetter(chars[pos]) || chars[pos] == '_' || chars[pos] == '$') {
						state = State.IN_IDENT;
					} else if (Character.isWhitespace(chars[pos])) {
						pos++;
						posInLine++;
					} else if (chars[pos] == '\t' || chars[pos] == '\b' || chars[pos] == '\'' || chars[pos] == '\\'
							|| chars[pos] == '\f') {

						throw new LexicalException("Error at Position: " + pos, pos);
					} else {
						throw new LexicalException("Error at Position: " + pos, pos);
					}

				}
				}
			}
				break;
			case IN_DIGIT: {

				while (pos < chars.length - 1 && Character.isDigit(chars[pos])) {
					pos++;
					//System.out.println(pos);
					// startPos++;
				}
				// System.out.println(pos-startPos+"****");
				String integer1 = new String(chars, startPos, pos - startPos);
				//System.out.println(integer1 + " ** ");
				try {
					Integer.parseInt(integer1);
					tokens.add(new Token(Kind.INTEGER_LITERAL, startPos, pos - startPos, line, posInLine));
					pos_of_token(pos, startPos, posInLine);
					state = State.START;
				} catch (NumberFormatException e) {
					throw new LexicalException(" Integer out of bounds at position: " + (startPos), startPos);
				}
			}
				break;

			case IN_STRING: {
				while (chars[pos] == '\b' || chars[pos] == '\t'
						|| /* chars[pos]=='\n' || */ chars[pos] == '\f'
						|| /* chars[pos]=='\r' || */chars[pos] == '\'')// chars[pos]=='\\')
				{
					//System.out.println(chars[pos]);
					pos++;
					// posInLine++;
				}

				while (pos < chars.length - 1 && isAscii(chars[pos]) && chars[pos] != '\"') // &&
																							// //(chars[pos])!='\\')
				{
					//System.out.println(chars[pos] + " ascii");
					if (chars[pos] == '\r' || chars[pos] == '\n') // ||
																	// chars[pos]=='\\'
																	// )
					{
						break;
					}
					if (chars[pos] == '\\') {
						// if(pos<chars.length-1 && chars[++pos]=='\\')
						// throw new LexicalException("error 234" + pos,pos);

						// posInLine++;
						//System.out.println(chars[pos] + " ghusa");
						pos++;
						if ((pos) < (chars.length - 1) && (chars[pos] == 'n' || chars[pos] == 'r' || chars[pos] == 't'
								|| chars[pos] == 'f' || chars[pos] == '\'' || chars[pos] == 'b' || chars[pos] == '\"'
								|| chars[pos] == '\\')) {
							//System.out.println(chars[pos] + " escape");
							pos++;
							// posInLine++;
							// if(chars[pos]=='\\')

						} else {
							//System.out.println(chars[pos] + " fullescape");
							throw new LexicalException("String Literal Error at Position: " + (pos), pos);
						}
					} else {
						// System.out.println(chars[pos] + " not double slash");
						pos++;
						// posInLine++;
					}

				}
				if (chars[pos] == '\"') {
					String sop = new String(chars, startPos, pos - startPos + 1);
					//System.out.println(sop + "^^ " + (startPos) + (pos - startPos + 1));
					//System.out.println(posInLine + " ## ");
					tokens.add(new Token(Kind.STRING_LITERAL, startPos, sop.length(), line, posInLine));
					int leng = sop.length();
					startPos = startPos + leng;
					posInLine = posInLine + leng;
					// System.out.println(pos + " %% "+ leng);
					pos++;
					state = State.START;
				} else {
					throw new LexicalException("String Literal error at position: " + (pos), pos);
				}

			}
				break;

			case IN_IDENT: {

				while (pos < chars.length - 1
						&& (Character.isLetterOrDigit(chars[pos]) || chars[pos] == '_' || chars[pos] == '$')) {
					//System.out.println(chars[pos] + " && ");
					pos++;
				}
				// else
				{
					// KEYWORDS

					keycheck = new String(chars, startPos, pos - startPos);
					// System.out.println("working " + keycheck);
					if (keywordmap.containsKey(keycheck)) {
						Kind value = keywordmap.get(keycheck);
						tokens.add(new Token(value, startPos, pos - startPos, line, posInLine));
						pos_of_token(pos, startPos, posInLine);
						state = State.START;
						// pos++;posInLine++;
					} else {
						tokens.add(new Token(Kind.IDENTIFIER, startPos, pos - startPos, line, posInLine));
						pos_of_token(pos, startPos, posInLine);
						state = State.START;
					}
				}
			}
				break;

			case IN_COMMENT: {
				while (pos < chars.length - 1 && chars[pos] != '\n' && chars[pos] != '\r') {
					// System.out.println("comment" + chars[pos]);
					pos++;
					posInLine++;
				}
				if (chars[pos] == '\n' || chars[pos] == '\r') {
					// System.out.println("newline encountered");
					pos++;
					line++;
					posInLine = 1;
					if ((pos) < len && chars[pos] == '\n' && chars[pos - 1] == '\r')
						line--;
					state = State.START;
				}
			}
				break;
			}// break;
		}
		tokens.add(new Token(Kind.EOF, pos, 0, line, posInLine));
		return this;

	}

	/**
	 * Returns true if the internal iterator has more Tokens
	 * 
	 * @return
	 */
	public boolean hasTokens() {
		return nextTokenPos < tokens.size();
	}

	/**
	 * Returns the next Token and updates the internal iterator so that the next
	 * call to nextToken will return the next token in the list.
	 * 
	 * It is the callers responsibility to ensure that there is another Token.
	 * 
	 * Precondition: hasTokens()
	 * 
	 * @return
	 */
	public Token nextToken() {
		return tokens.get(nextTokenPos++);
	}

	/**
	 * Returns the next Token, but does not update the internal iterator. This
	 * means that the next call to nextToken or peek will return the same Token
	 * as returned by this methods.
	 * 
	 * It is the callers responsibility to ensure that there is another Token.
	 * 
	 * Precondition: hasTokens()
	 * 
	 * @return next Token.
	 */
	public Token peek() {
		return tokens.get(nextTokenPos);
	}

	/**
	 * Resets the internal iterator so that the next call to peek or nextToken
	 * will return the first Token.
	 */
	public void reset() {
		nextTokenPos = 0;
	}

	/**
	 * Returns a String representation of the list of Tokens
	 */
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("Tokens:\n");
		for (int i = 0; i < tokens.size(); i++) {
			sb.append(tokens.get(i)).append('\n');
		}
		return sb.toString();
	}

}
